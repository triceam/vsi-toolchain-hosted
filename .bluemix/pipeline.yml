---
stages:
- name: Build Preparation Stage
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  properties:
  - name: PRIVATE_KEY
    value: "${PRIVATE_KEY}"
    type: secure
  - name: API_KEY
    value: "${API_KEY}"
    type: secure
  - name: VSI_HOST
    value: "${VSI_HOST}"
    type: secure
  jobs:
  - name: Set Keys
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      set -eo pipefail
      mkdir pipeline
      echo "${API_KEY}" > pipeline/cloudkey.txt
      echo "${VSI_HOST}" > pipeline/hostip.txt
      echo "${PRIVATE_KEY}" > pipeline/ssh_private_key && chmod 400 pipeline/ssh_private_key
- name: Build Stage
  inputs:
  - type: job
    stage: Build Preparation Stage
    job: Set Keys
  triggers:
  - type: stage
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |
      mkdir debian

      echo "scripts/install.sh initial"
      mkdir scripts
      echo "apt-get update" > scripts/install.sh
      echo "apt-get install -f" >> scripts/install.sh
      echo 'if ! [ -x "$(command -v nvm)" ]; then' >> scripts/install.sh
      echo "wget -qO- 'https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh' | bash -;" >> scripts/install.sh
      echo "source ~/.profile" >> scripts/install.sh
      echo "fi" >> scripts/install.sh
      echo "nvm install 8.16.0" >> scripts/install.sh
      echo "npm install" >> scripts/install.sh
      echo "install.sh updated"
      cat scripts/install.sh


      echo "scripts/start.sh initial"
      echo "pkill node" > scripts/start.sh
      echo "export PORT='3000'" > scripts/start.sh
      echo "npm start" > scripts/start.sh
      echo "start.sh updated"
      cat scripts/start.sh

      echo "app-0.0 (1-1) unstable; urgency=low" >> debian/changelog
      echo " " >> debian/changelog
      echo "  * Initial release." >> debian/changelog
      echo " " >> debian/changelog
      echo " -- John Doe <replacethiswithyourem@il.com>  Mon, 1 Jan 2000 00:00:00 -0000" >> debian/changelog

      echo "----------"
      echo "debian/changelog"
      echo "----------"
      cat debian/changelog
      echo "----------"

      echo "9" >> debian/compat

      echo "----------"
      echo "debian/compat"
      echo "----------"
      cat debian/compat
      echo "----------"

      echo "Source: app-0.0" >> debian/control
      echo "Section: x11" >> debian/control
      echo "Priority: optional" >> debian/control
      echo "Maintainer: John Doe <replacethiswithyourem@il.com>" >> debian/control
      echo "Build-Depends: debhelper (>= 9)" >> debian/control
      echo "Standards-Version: 3.9.8" >> debian/control
      echo " " >> debian/control
      echo "Package: app-0.0" >> debian/control
      echo "Architecture: all" >> debian/control
      depends='${misc:Depends}'
      echo "Depends: $depends" >> debian/control
      echo "Description: This package transfers app code to VSI for deployment" >> debian/control

      echo "----------"
      echo "debian/control"
      echo "----------"
      cat debian/control
      echo "----------"

      fileMatch="_script.sh"
      for f in * 
      do 
        if [[ "$f" != "debian" && "$f" != "_env" && $f =~ $fileMatch ]; then
          echo "$f					usr/src/app" >> debian/install
        fi
      done
      echo "scripts/install.sh					usr/src/app" >> debian/install
      echo "scripts/start.sh					usr/src/app" >> debian/install

      echo "----------"
      echo "debian/install"
      echo "----------"
      cat debian/install
      echo "----------"

      echo "#!/usr/bin/make -f" >> debian/rules
      echo "# See debhelper(7) (uncomment to enable)" >> debian/rules
      echo "# output every command that modifies files on the build system." >> debian/rules
      echo "#export DH_VERBOSE = 1" >> debian/rules
      echo " " >> debian/rules
      echo "# see FEATURE AREAS in dpkg-buildflags(1)" >> debian/rules
      echo "#export DEB_BUILD_MAINT_OPTIONS = hardening=+all" >> debian/rules
      echo " " >> debian/rules
      echo "# see ENVIRONMENT in dpkg-buildflags(1)" >> debian/rules
      echo "# package maintainers to append CFLAGS" >> debian/rules
      echo "#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic" >> debian/rules
      echo "# package maintainers to append LDFLAGS" >> debian/rules
      echo "#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed" >> debian/rules
       echo "" >> debian/rules
      echo "%:" >> debian/rules
      dollarAt='$@'
      echo "	dh $dollarAt" >> debian/rules
      echo " " >> debian/rules
      echo "# dh_make generated override targets" >> debian/rules
      echo "# This is example for Cmake (See https://bugs.debian.org/641051 )" >> debian/rules
      echo "#override_dh_auto_configure:" >> debian/rules
      deb_host='$(DEB_HOST_MULTIARCH)'
      echo "#	dh_auto_configure -- #	-DCMAKE_LIBRARY_PATH=$deb_host" >> debian/rules

      echo "----------"
      echo "debian/rules"
      echo "----------"
      cat debian/rules
      echo "----------"


      
      # package app for VSI deployment
      apt-get update && apt-get install -y build-essential debhelper fakeroot
      bash pipeline/scripts/build.sh
      dpkg-buildpackage -rfakeroot -us -uc -b && mv ../app-0.0_1-1_all.deb pipeline/app-0.0_1-1_all.deb
      if [ ! -f pipeline/app-0.0_1-1_all.deb ]; then echo "Debian package was not successfully created."; exit 1; fi
    docker_image: node:8
- name: Deploy / Install / Start Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #!/bin/sh
      set -eo pipefail

      apk add --no-cache openssh rsync
      VSI_HOST=$(cat pipeline/hostip.txt)
      ssh -o StrictHostKeyChecking=no -i pipeline/ssh_private_key root@$VSI_HOST "apt-get update; apt-get install rsync; mkdir -p app"
      rsync -arv -e "ssh -i pipeline/ssh_private_key" pipeline/app-0.0_1-1_all.deb root@$VSI_HOST:app
    docker_image: alpine
  - name: Install
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      set -eo pipefail
      VSI_HOST=$(cat pipeline/hostip.txt)
      ssh -o StrictHostKeyChecking=no -i pipeline/ssh_private_key root@$VSI_HOST "rm -rf /usr/src/app; cd app; dpkg -i app-0.0_1-1_all.deb; cd /usr/src/app; source install.sh"
  - name: Start
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      set -eo pipefail
      VSI_HOST=$(cat pipeline/hostip.txt)
      ssh -o StrictHostKeyChecking=no -i pipeline/ssh_private_key root@$VSI_HOST "cd /usr/src/app; nohup bash start.sh &> output.log &"
      ssh -o StrictHostKeyChecking=no -i pipeline/ssh_private_key root@$VSI_HOST "cd /usr/src/app; cat output.log"
- name: Health Check Stage
  inputs:
  - type: job
    stage: Deploy / Install / Start Stage
    job: Start
  triggers:
  - type: stage
  jobs:
  - name: Test
    type: tester
    script: |-
      #!/bin/sh
      set -eo pipefail
      apk add --no-cache curl openssh
      VSI_HOST=$(cat pipeline/hostip.txt)
      PORT='3000'
      
      # sleep for 10 seconds to allow enough time for the server to start
      sleep 10
      if [ $(curl -sL -w "%{http_code}\\n" "http://${VSI_HOST}:${PORT}/" -o /dev/null --connect-timeout 3 --max-time 5 --retry 3 --retry-max-time 30) == "200" ]; then
        echo "Successfully reached health endpoint: http://${VSI_HOST}:${PORT}/"
        echo "====================================================================="
      else
        echo "Could not reach health endpoint: http://${VSI_HOST}:${PORT}/"
        exit 1;
      fi;
    test_type: customimage
    docker_image: alpine