---
stages:
- name: Build Preparation Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  properties:
  - name: VI_INSTANCE_NAME
    value: NodeVSIforDevOps
    type: text
  - name: PUBLIC_KEY
    value: "${PUBLIC_KEY}"
    type: secure
  - name: PRIVATE_KEY
    value: "${PRIVATE_KEY}"
    type: secure
  - name: TF_VAR_ibm_sl_username
    value: "${TF_VAR_ibm_sl_username}"
    type: text
  - name: TF_VAR_ibm_sl_api_key
    value: "${TF_VAR_ibm_sl_api_key}"
    type: secure
  - name: TF_VAR_ibm_cloud_api_key
    value: "${API_KEY}"
    type: secure
  - name: GIT_USER
    value: "${GITLAB_USERNAME}"
    type: text
  - name: GIT_PASSWORD
    value: "${GITLAB_ACCESS_TOKEN}"
    type: secure
  jobs:
  - name: Validate
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      set -eo pipefail
      bash terraform/scripts/validate.sh
- name: Terraform Plan Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  jobs:
  - name: Plan
    type: builder
    working_dir: terraform
    artifact_dir: ''
    build_type: customimage
    script: |-
      #!/bin/bash
      set -eo pipefail
      export PUBLIC_KEY=$(cat publickey.txt)
      export TF_VAR_ibm_sl_api_key=$(cat slkey.txt)
      export TF_VAR_ibm_sl_username=$(cat slusername.txt)
      export TF_VAR_ibm_cloud_api_key=$(cat cloudkey.txt)
      export VI_INSTANCE_NAME=$(cat instancename.txt)
      if [ -f gituser.txt ]; then export GIT_USER=$(cat gituser.txt); fi
      if [ -f gitpassword.txt ]; then export GIT_PASSWORD=$(cat gitpassword.txt); fi
      export GIT_URL=$(cat giturl.txt)
      bash scripts/fetch-state.sh
      terraform init -input=false
      terraform validate
      terraform plan -var "ssh_public_key=$PUBLIC_KEY" -input=false -out tfplan
    docker_image: ibmterraform/terraform-provider-ibm-docker
- name: Terraform Apply Stage
  inputs:
  - type: job
    stage: Terraform Plan Stage
    job: Plan
  triggers:
  - type: stage
  jobs:
  - name: Apply
    type: builder
    artifact_dir: ''
    build_type: customimage
    script: |-
      #!/bin/bash
      set -eo pipefail
      terraform apply -auto-approve -input=false tfplan
      terraform output "host ip" > hostip.txt
      bash scripts/publish-state.sh
    docker_image: ibmterraform/terraform-provider-ibm-docker